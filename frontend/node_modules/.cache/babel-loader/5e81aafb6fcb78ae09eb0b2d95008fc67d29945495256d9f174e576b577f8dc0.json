{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n\n// export const bookSlice = createSlice({\n//   name: 'books',\n//   initialState: {\n//     books: [],\n//     loading: false,\n//     error: null\n//   },\n//   reducers: {\n//     fetchBooksRequest: (state) => {\n//       state.loading = true;\n//     },\n//     fetchBooksSuccess: (state, action) => {\n//       state.books = action.payload;\n//       state.loading = false;\n//     },\n//     fetchBooksFailure: (state, action) => {\n//       state.error = action.payload;\n//       state.loading = false;\n//     },\n//   },\n// });\n\n// export const { fetchBooksRequest, fetchBooksSuccess, fetchBooksFailure } = bookSlice.actions;\n\n// export const fetchBooks = () => async (dispatch) => {\n//   dispatch(fetchBooksRequest());\n//   try {\n//     const response = await fetch('http://localhost:5002/api/books');\n//     const data = await response.json();\n//     dispatch(fetchBooksSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchBooksFailure(error.toString()));\n//   }\n// };\n\n// export default bookSlice.reducer;\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchBooks = createAsyncThunk('books/fetchBooks', async () => {\n  const response = await fetch('http://localhost:5002/api/books');\n  const data = await response.json();\n  return data;\n});\nconst bookSlice = createSlice({\n  name: 'books',\n  initialState: {\n    books: [],\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchBooks.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchBooks.fulfilled, (state, action) => {\n      state.loading = false;\n      state.books = action.payload;\n    }).addCase(fetchBooks.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport default bookSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchBooks","response","fetch","data","json","bookSlice","name","initialState","books","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/Users/sparshs.pradhan/book-review-platform/frontend/src/redux/bookSlice.js"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\n\n// export const bookSlice = createSlice({\n//   name: 'books',\n//   initialState: {\n//     books: [],\n//     loading: false,\n//     error: null\n//   },\n//   reducers: {\n//     fetchBooksRequest: (state) => {\n//       state.loading = true;\n//     },\n//     fetchBooksSuccess: (state, action) => {\n//       state.books = action.payload;\n//       state.loading = false;\n//     },\n//     fetchBooksFailure: (state, action) => {\n//       state.error = action.payload;\n//       state.loading = false;\n//     },\n//   },\n// });\n\n// export const { fetchBooksRequest, fetchBooksSuccess, fetchBooksFailure } = bookSlice.actions;\n\n// export const fetchBooks = () => async (dispatch) => {\n//   dispatch(fetchBooksRequest());\n//   try {\n//     const response = await fetch('http://localhost:5002/api/books');\n//     const data = await response.json();\n//     dispatch(fetchBooksSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchBooksFailure(error.toString()));\n//   }\n// };\n\n// export default bookSlice.reducer;\n\n\n\n\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchBooks = createAsyncThunk('books/fetchBooks', async () => {\n  const response = await fetch('http://localhost:5002/api/books');\n  const data = await response.json();\n  return data;\n});\n\nconst bookSlice = createSlice({\n  name: 'books',\n  initialState: { books: [], loading: false, error: null },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchBooks.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchBooks.fulfilled, (state, action) => {\n        state.loading = false;\n        state.books = action.payload;\n      })\n      .addCase(fetchBooks.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default bookSlice.reducer;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,UAAU,GAAGD,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACzE,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;EAC/D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI;AACb,CAAC,CAAC;AAEF,MAAME,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,OAAO,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAK,CAAC;EACxDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,UAAU,CAACe,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDI,OAAO,CAACd,UAAU,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACd,UAAU,CAACoB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAehB,SAAS,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}